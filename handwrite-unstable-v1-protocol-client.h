/* Generated by wayland-scanner 1.23.1 */

#ifndef HANDWRITE_UNSTABLE_V1_CLIENT_PROTOCOL_H
#define HANDWRITE_UNSTABLE_V1_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_handwrite_unstable_v1 The handwrite_unstable_v1 protocol
 * Protocol for CJK charactor handwrite input application
 *
 * @section page_desc_handwrite_unstable_v1 Description
 *
 * This protocol allows the compositor to receive CJK charactor from handwrite input application.
 *
 * Warning! The protocol described in this file is experimental and
 * backward incompatible changes may be made. Backward compatible changes
 * may be added together with the corresponding interface version bump.
 * Backward incompatible changes are done by bumping the version number in
 * the protocol and interface names and resetting the interface version.
 * Once the protocol is to be declared stable, the 'z' prefix and the
 * version number in the protocol and interface names are removed and the
 * interface version number is reset.
 *
 * @section page_ifaces_handwrite_unstable_v1 Interfaces
 * - @subpage page_iface_zwp_handwrite_v1 - handwrite
 * @section page_copyright_handwrite_unstable_v1 Copyright
 * <pre>
 *
 * Copyright Â© 2024, guyuming
 *
 * Permission to use, copy, modify, distribute, and sell this
 * software and its documentation for any purpose is hereby granted
 * without fee, provided that the above copyright notice appear in
 * all copies and that both that copyright notice and this permission
 * notice appear in supporting documentation, and that the name of
 * the copyright holders not be used in advertising or publicity
 * pertaining to distribution of the software without specific,
 * written prior permission.  The copyright holders make no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied
 * warranty.
 *
 * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
 * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 * THIS SOFTWARE.
 * </pre>
 */
struct zwp_handwrite_v1;

#ifndef ZWP_HANDWRITE_V1_INTERFACE
#define ZWP_HANDWRITE_V1_INTERFACE
/**
 * @page page_iface_zwp_handwrite_v1 zwp_handwrite_v1
 * @section page_iface_zwp_handwrite_v1_desc Description
 *
 * Text is valid UTF-8 encoded.
 * @section page_iface_zwp_handwrite_v1_api API
 * See @ref iface_zwp_handwrite_v1.
 */
/**
 * @defgroup iface_zwp_handwrite_v1 The zwp_handwrite_v1 interface
 *
 * Text is valid UTF-8 encoded.
 */
extern const struct wl_interface zwp_handwrite_v1_interface;
#endif

#define ZWP_HANDWRITE_V1_SEND_HANDWRITE_TEXT 0


/**
 * @ingroup iface_zwp_handwrite_v1
 */
#define ZWP_HANDWRITE_V1_SEND_HANDWRITE_TEXT_SINCE_VERSION 1

/** @ingroup iface_zwp_handwrite_v1 */
static inline void
zwp_handwrite_v1_set_user_data(struct zwp_handwrite_v1 *zwp_handwrite_v1, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) zwp_handwrite_v1, user_data);
}

/** @ingroup iface_zwp_handwrite_v1 */
static inline void *
zwp_handwrite_v1_get_user_data(struct zwp_handwrite_v1 *zwp_handwrite_v1)
{
	return wl_proxy_get_user_data((struct wl_proxy *) zwp_handwrite_v1);
}

static inline uint32_t
zwp_handwrite_v1_get_version(struct zwp_handwrite_v1 *zwp_handwrite_v1)
{
	return wl_proxy_get_version((struct wl_proxy *) zwp_handwrite_v1);
}

/** @ingroup iface_zwp_handwrite_v1 */
static inline void
zwp_handwrite_v1_destroy(struct zwp_handwrite_v1 *zwp_handwrite_v1)
{
	wl_proxy_destroy((struct wl_proxy *) zwp_handwrite_v1);
}

/**
 * @ingroup iface_zwp_handwrite_v1
 *
 * send the CJK charactor recognized by handwrite input application.  
 */
static inline void
zwp_handwrite_v1_send_handwrite_text(struct zwp_handwrite_v1 *zwp_handwrite_v1, const char *text)
{
	wl_proxy_marshal_flags((struct wl_proxy *) zwp_handwrite_v1,
			 ZWP_HANDWRITE_V1_SEND_HANDWRITE_TEXT, NULL, wl_proxy_get_version((struct wl_proxy *) zwp_handwrite_v1), 0, text);
}

#ifdef  __cplusplus
}
#endif

#endif
